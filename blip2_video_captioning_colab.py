# -*- coding: utf-8 -*-
"""blip2_video_captioning_colab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ttNk3ADS9HhTHmojkSFdwwOX2zmrne8x
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import torch
import cv2
from PIL import Image
from transformers import Blip2Processor, Blip2ForConditionalGeneration

device = 'cuda' if torch.cuda.is_available() else 'cpu'

processor = Blip2Processor.from_pretrained('Salesforce/blip2-opt-2.7b')
model = Blip2ForConditionalGeneration.from_pretrained('Salesforce/blip2-opt-2.7b',
                                                      load_in_8bit=True,
                                                      device_map='auto',
                                                      torch_dtype=torch.float16
                                                      )

def extract_middle_frame(video_path):
  cap = cv2.VideoCapture(video_path)
  total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
  cap.set(cv2.CAP_PROP_POS_FRAMES, total_frames // 2)
  ret, frame = cap.read()
  cap.release()
  if not ret:
    raise Exception('Failed to extract middle frame')
  rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
  return Image.fromarray(rgb)

def generate_description(image):
  inputs = processor(images=image, return_tensors='pt').to(device, torch.float16)
  generated_ids = model.generate(**inputs)
  generated_text = processor.batch_decode(generated_ids, skip_special_tokens=True)[0].strip()
  return generated_text

video_dir = '/content/drive/MyDrive/Akai_Space_Videos'

import re
def extract_video_number(filename):
    match = re.search(r'Video\s*-\s*(\d+):', filename)
    return int(match.group(1)) if match else float('inf')

video_files = sorted(
    [f for f in os.listdir(video_dir) if f.endswith('.avi')],
    key=extract_video_number
)

for video_file in video_files:
    video_path = os.path.join(video_dir, video_file)
    try:
        image = extract_middle_frame(video_path)
        caption = generate_description(image)
        print(f"{video_file} âžœ {caption}")
    except Exception as e:
        print(f"Failed to process {video_file}: {e}")

